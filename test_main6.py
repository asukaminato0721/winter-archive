from __future__ import annotations
from dataclasses import dataclass
from decimal import Decimal
from fastapi.templating import Jinja2Templates
from sympy import Segment2D, Point as Point1

w = 1500
h = 1000


@dataclass
class Point:
    x: Decimal
    y: Decimal
    vx: Decimal
    vy: Decimal
    cnt: int = 0

    def get_next_sec(self):
        nx = self.x + self.vx
        ny = self.y + self.vy
        # print(nx, ny)
        # 分类讨论，共 9 类
        if nx <= 0 and ny <= 0:  # 1
            return Point(-nx, -ny, -self.vx, -self.vy, self.cnt + 1)
        if nx <= 0 and 0 < ny < h:  # 2
            return Point(-nx, ny, -self.vx, self.vy, self.cnt + 1)
        if nx <= 0 and ny >= h:  # 3
            return Point(-nx, h - (ny - h), -self.vx, -self.vy, self.cnt + 1)
        if 0 < nx < w and ny >= h:  # 4
            return Point(nx, h - (ny - h), self.vx, -self.vy, self.cnt + 1)
        if nx >= w and ny >= h:  # 5
            return Point(w - (nx - w), h - (ny - h), -self.vx, -self.vy, self.cnt + 1)
        if nx >= w and 0 < ny < h:  # 6
            return Point(w - (nx - w), ny, -self.vx, self.vy, self.cnt + 1)
        if nx >= w and ny <= 0:  # 7
            return Point(w - (nx - w), -ny, -self.vx, -self.vy, self.cnt + 1)
        if 0 < nx < w and ny <= 0:  # 8
            return Point(nx, -ny, self.vx, -self.vy, self.cnt + 1)
        return Point(nx, ny, self.vx, self.vy, self.cnt)


def str2pts(
    s="1463,468,0.6,0.9,1341,392,-0.8,-0.5,169,136,0.6,0.5,220,709,-0.6,-0.6,1190,741,0.8,0.9,177,378,0.6,-0.9,514,730,0.7,-0.9,1083,198,-0.9,-0.5,299,135,-0.8,-0.5,713,100,-0.5,0.8,1154,785,-0.5,0.7,1127,489,-0.9,-0.8,537,768,0.5,0.8,666,663,0.7,0.9,1158,244,0.9,-0.6,316,593,-0.5,-0.5,931,339,0.5,-0.5,563,702,0.6,-0.8,813,942,0.6,-0.7,1085,837,0.9,-0.9,708,137,0.7,-0.5,1284,752,-0.6,-0.8,587,612,-0.9,-0.8,547,534,-0.5,-0.9,673,818,0.8,-0.6,910,917,0.9,-0.5,39,851,0.7,-0.6,1450,694,0.8,0.7,1329,611,0.9,0.9,282,957,-0.6,-0.5,1420,253,-0.7,-0.5,779,594,-0.8,-0.6,1366,951,-0.9,0.9,680,110,-0.7,-0.9,174,954,-0.8,0.8,1351,286,0.8,0.6,1069,791,0.5,-0.7,731,679,-0.8,0.6,221,69,-0.7,0.7,901,900,-0.7,0.7,1150,410,-0.5,0.7,989,343,-0.9,-0.8,66,719,-0.6,-0.6,31,275,-0.7,-0.5,724,113,0.7,-0.5,1116,198,-0.7,-0.5,536,110,0.7,-0.9,718,684,0.6,-0.8,841,980,0.6,0.7,1408,752,-0.9,0.7,347,307,0.8,0.7,914,688,-0.7,-0.6,479,619,-0.5,-0.9,1172,557,0.7,0.6,1443,125,-0.5,0.9,818,147,0.7,-0.7,24,136,0.6,0.8,493,107,-0.5,-0.7,1231,142,0.9,0.8,773,669,0.9,-0.8,1339,378,-0.6,0.8,905,282,0.6,0.7,1418,817,-0.5,0.6,184,812,-0.9,0.7,1037,547,0.7,-0.9,1215,385,0.7,-0.7,316,868,-0.8,0.6,189,215,0.8,-0.6,948,39,0.8,-0.7,256,750,-0.6,-0.8,1395,840,0.8,-0.5,1373,611,0.7,-0.9,494,342,-0.5,-0.9,1108,901,0.6,-0.5,1417,674,0.7,-0.9,1082,633,-0.5,-0.6,1284,519,0.7,0.9,1047,49,-0.7,-0.9,1402,905,0.5,0.7,1225,999,0.6,0.9,118,551,0.8,0.7,1302,462,-0.6,-0.5,1266,324,-0.9,0.5,1097,533,0.9,-0.6,922,814,-0.6,0.9,1113,518,-0.5,0.8,896,586,-0.7,-0.5,410,476,-0.7,-0.9,96,417,-0.8,0.6,314,880,-0.7,-0.5,803,109,0.9,-0.6,839,645,-0.7,0.9,1095,145,-0.8,0.9,1490,872,0.6,-0.8,1043,651,0.6,-0.7,1365,257,-0.9,0.7,66,783,0.7,-0.9,325,134,0.9,-0.6,1039,161,-0.7,-0.7,561,553,0.8,0.5,297,192,0.6,0.7,869,639,0.9,0.8,366,588,-0.5,-0.5,1355,451,0.5,0.7,1484,992,0.9,-0.9,1339,274,0.9,-0.5,1038,282,-0.7,0.6,48,617,-0.5,0.5,626,773,0.7,0.7,873,883,-0.9,0.9,672,46,0.6,-0.9,1488,590,-0.9,-0.7,928,846,-0.6,0.8,820,370,0.7,-0.5,698,95,-0.6,0.8,921,689,-0.6,0.5,697,572,-0.8,0.6,1385,27,-0.9,0.5,480,254,0.6,0.8,435,723,0.9,0.5,969,623,-0.7,0.6,1026,603,-0.5,0.5,975,731,-0.5,0.5,4,861,-0.5,0.8,80,697,-0.7,-0.5,139,291,-0.6,0.7,186,330,0.5,0.5,1484,779,0.5,0.6,239,124,-0.5,-0.9,141,826,0.5,0.5,1355,421,0.9,-0.7,278,462,-0.9,0.6,823,402,-0.6,-0.9,1352,547,-0.9,-0.6,733,513,-0.7,-0.7,249,936,0.8,0.5,1115,569,0.8,0.9,984,634,0.6,-0.8,35,704,0.9,0.6,160,371,0.8,0.5,76,601,-0.6,-0.7,467,931,0.5,0.5,494,669,-0.6,0.9,281,540,0.9,-0.6,1482,988,-0.5,-0.9,206,892,-0.8,0.8,501,392,-0.6,0.7,379,632,0.7,-0.6,1416,791,0.6,0.7,1180,607,-0.7,-0.8,772,6,-0.8,-0.5,836,963,-0.7,-0.7,1353,66,0.5,0.7,285,987,-0.7,0.8,1371,248,0.5,0.5,1441,601,0.5,0.9,906,555,-0.9,-0.7,320,602,0.9,-0.5,9,335,-0.8,0.5,1440,848,-0.7,0.7,1431,86,0.6,-0.6,1305,934,-0.6,-0.9,1246,845,-0.5,0.8,203,599,-0.7,-0.8,1059,524,0.7,0.9,214,172,-0.9,0.7,574,705,0.6,-0.7,317,126,-0.5,-0.7,751,52,-0.9,-0.5,1008,805,0.7,0.5,276,598,-0.9,-0.5,168,342,0.6,-0.7,841,462,-0.8,0.7,994,669,-0.9,-0.8,471,608,-0.5,0.8,860,608,-0.8,0.7,1492,320,-0.7,-0.6,861,354,-0.8,0.7,419,825,-0.9,0.7,324,31,-0.8,-0.6,197,358,-0.8,0.7,1353,144,-0.6,-0.8,1350,818,-0.8,0.6,1113,600,0.7,0.5,219,654,0.9,0.7,1451,137,-0.6,0.7,1334,196,-0.8,0.7,435,578,-0.9,0.8,405,401,-0.6,-0.9,674,729,-0.5,0.7,309,362,0.9,0.5,872,239,-0.5,-0.7,1121,570,0.6,0.7,569,876,-0.7,0.8,834,847,-0.8,0.6,1492,300,0.6,0.8,683,775,0.5,-0.5,146,544,0.8,0.5,170,522,0.5,-0.7,1342,698,0.8,-0.5",
):
    s = s.split(",")
    pts = []
    for px, py, pvx, pvy in zip(s[::4], s[1::4], s[2::4], s[3::4]):
        pts.append(Point(Decimal(px), Decimal(py), Decimal(pvx), Decimal(pvy)))
    return pts


import unittest


class Test(unittest.TestCase):
    # def test_f6(self):
    #     data = "10,20,0.1,0.3,110,120,-2.3,-1.3"
    #     self.assertEqual(str2pts(data), [])
    def test_f7(self):
        l = str2pts()
        cnt = 0
        for _ in range(2000):
            for ii in l:
                for jj in l:
                    if ii != jj:
                        if (ii.x - jj.x) ** 2 + (ii.y - jj.y) ** 2 <= 1:
                            cnt += 1
            for i in l:
                i = i.get_next_sec()
        self.assertEqual(cnt, 0)


if __name__ == "__main__":
    unittest.main(verbosity=2)
